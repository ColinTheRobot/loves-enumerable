# Project Euler #2
#
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
#

require "benchmark/ips"

MAX = 4_000_000

def fib_sum_enum(max)
  enum = Enumerator.new do |y|
    a, b = 1, 1
    loop do
      y << b
      a, b = b, a + b
    end
  end
  enum.lazy.take_while { |n| n <= max }.select(&:even?).reduce(:+)
end

def fib_sum_while_loop(max)
  total = 0
  previous = 0
  i = 1
  while i <= max
    total +=i if (i % 2 == 0)

    i, previous = previous, previous + i
  end
  total
end

Benchmark.ips do |x|
  x.report("fibonacci enumerator") do
    fib_sum_enum(MAX)
  end
  x.report("fibonacci while loop") do
    fib_sum_while_loop(MAX)
  end
  x.compare! # Output the comparison
end
